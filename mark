#!/bin/bash

#TODO: somehow remove extra zip but leave the most recent ones

#TODO: make marking app, integrated with output.txt

#TODO: unzip_all still have problem with "a2", because sometimes that isn't the path

#TODO: ignore any file which starts with . do not let it recurse on its own.

# $1 zip folder
# $2 dest folder (assignment #)
unzip_all(){
echo $#
if [ "$#" -ne 2 ]; then
  echo "error: unzip must take 2 parameters"
else
  unzip -u "$1" -d $2
  dir=$(pwd)
  cd $2
  files=(*)
  # echo "${files[@]}"
  for i in "${!files[@]}"; do
    echo ${files[i]}
    new_dir=$(parse_folder_name "${files[i]}")
    if [ "$new_dir" != "" ]; then
      mkdir $new_dir
      unzip -u "${files[i]}" -d $new_dir
      rm "${files[i]}"
    fi
  done
  cd "$dir"
  rm "$1"
fi
}

# get folder_name from a long list of name
# $1 is for folder name
# $2 is assignment name
parse_folder_name(){
  if [ "$#" -ne 1 ]; then
    # return would not be correct
    # echo "error: parse_folder_name requires folder name"
    echo ""
    return 0
  elif [ "${1: -4}" != ".zip" ]; then
    echo ""
    return 0
  else
    name="a"
    for w in $1
    do
      # echo $w
      if [[ "$w" = "-" && "$start" = true ]]; then
        break
      fi
      if [ "$start" = true ]; then
        name=$(echo ${name}_${w})
      fi
      if [ "$w" = "-" ]; then
        start=true
      fi
    done
    echo $name
  fi
}


# clean up the output file to remove all the path that reveals my computer's path structure
output_cleanup() {
  file="$1"
  folder="$2"
  if [ "$file" == "" ]; then
    echo "-c must have src" >&2
    exit 1
  fi
  echo "going to clean up "
  #TODO: some problem with this
  sed -i 's/file.*'$folder'/file:\/'$folder'/g' $file
  echo "clean up done"
}

# print usage
print_usage(){
  echo -e "usage: $0 [-u src folder] [-v src dst] [-i file_folder individual_folder] [-o path file]
    \n\t-i: validate individual HTML with individual_folder/*/file_folder(or name) and produce tmp.txt
    \n\t-v: validate HTMLs under src folder and produce output.txt, only display path from folder onwards
    \n\t-u: unzip all .zip folders in src to specific named folders in dst
    \n\t-c: clean-up output.txt
    \n\t-o: open up path/file in chrome
    \nnote: can only run 1 flag at same time; ignores extra parameters"
}

# validate a whole folder
validate_folder(){
  local folder="$1"
  local newF=${folder#*a_}
  local newF=${newF%\/}
  folder=${folder%\/}
  local assignment="$2"
  # local part="$3"
  outFile="../results/assignment$assignment/$newF.txt"
  # echo "inside validate folder"
  echo $outFile
  # exit 1
  # make folder structures and output text files
  if [[ ! -d "../results/assignment$assignment" ]]; then
    mkdir -p ../results/assignment$assignment
  fi
  if [[ ! -f $outFile ]]; then
    touch "$outFile"
    echo "created new file $outFile"
  fi

  # validation
  fpath="" #global
  # echo "part $part"
  # if [[ "$part" == "*" ]]; then
    #no wild card here
  ls $folder
  fpath=$(find "$folder"/ -name index.html)
  # else
    # get_path "$folder" "$part"
  # fi
  echo "file is: $fpath"
  fpath=$(dirname  "$fpath")
  echo "path is: $fpath"
  npm run vnu-html "$fpath" >> "$outFile" 2>&1
  npm run vnu-css "$fpath" >> "$outFile" 2>&1
  output_cleanup $outFile "a_"
}

# get_path(){
#   folder="$1"
#   part="$2"
#   echo $folder
#   echo $part
#   # yes wild card
#   fpaths=()
#   while IFS= read -r -d $'\0'; do
#     fpaths+=("$REPLY")
#     # echo $REPLY
#   done << (find $folder/ -name index.html -print0)
#   len=${#fpaths[*]}
#   # echo $len
#   i=0
#   while [ $i -lt $len ]; do
#     if [[ ${fpaths[$i]} == *[pP]art$part* ||  ${fpaths[$i]} == *ment*$part* ]]; then
#       fpath=${fpaths[$i]}
#     fi
#     # echo ${fpaths[$i]}
#     let i++
#   done
# }

# open up a local file in chrome (useful for marking 1030)

open_chrome_url(){
  local path="$1"
  local part="$2"
  # if [[ "$part" == "*" ]]; then
    # path=$(find "$path/" -name index.html)
    # path=$(dirname "$path")
    # start chrome "$path"/index.html
    # start chrome "$path"/style.css
  # else
    # get_path "$path" "$part"
    # start chrome "$fpath"
  # fi
  start chrome "$path"
  # start chrome "$path"/index.html
  # start chrome "$path"/style.css
  # TODO: only works for windows. linux use xdg-open and OSX uses open
}

# parse_folder_name "$fname" "a1"

# using flags
# -v src: validate HTMLs under this folder and produce a output.txt with all results
# -u src
# adapted from https://stackoverflow.com/questions/18414054/bash-getopts-reading-optarg-for-optional-flags
if [[ "$#" -lt 1 ]]; then
  print_usage;
  exit 1
else
  # while [[ $# -gt 0 ]]; do
    opt="$1"
    shift;
    case "$opt" in
      "-u")
        src="$1";
        dst="$2";
        echo $src $dst
        if [[ "$src" == "" || "$dst" == "" ]]; then
          echo "-u must have src and dst" >&2
          exit 1
        fi
        unzip_all "$src" "$dst"
        echo "inside u $src $dst"
        ;;
      "-v")
        folder="$1"
        newF=${folder#*a_}
        newF=${newF%\/}
        assignment="$2"
        # part="$3"
        # echo "inside v $part"
        # validate_folder "$folder" "$assignment" "$part"
        validate_folder "$folder" "$assignment"
        # open up the output file or udpate it
        start chrome "../results/assignment$assignment/$newF.txt"
        # open_chrome_url "$folder" "$part"
        open_chrome_url "$folder" "ABC"
        npm cache clean --force
        ;;
      "-c")
        echo "clean up"
        output_cleanup "$1" "$2"
        ;;
      "-o")
        open_chrome_url "$1" "$2"
        ;;
      *)
        echo "ERROR: Invalid option: \""$opt"\"" >&2
        exit 1
        ;;
    esac
  # done
fi
